/*
  ==============================================================================

    This file defines the user interface for the compressor/splitter plug‑in.

    It was originally auto‑generated by the Projucer but has been
    substantially refactored by Borato's AI assistant.  The refactor makes
    ownership of UI controls explicit, fixes type correctness and adds a
    handful of quality‑of‑life features such as a digital/analogue switch and
    detection mode selector.  See PluginEditor.cpp for implementation.

  ==============================================================================
*/

#pragma once

#include "../JuceLibraryCode/JuceHeader.h"
#include "PluginProcessor.h"

//==============================================================================
/**
    This class creates the audio plug‑in's editor component.  It inherits from
    several JUCE listener interfaces so it can react to slider, button and
    combo box changes.  RAII wrappers (std::unique_ptr) are used instead of
    bare raw pointers or untyped ScopedPointers.
*/
class CompreezorAudioProcessorEditor : public AudioProcessorEditor,
                                       public Slider::Listener,
                                       public Button::Listener,
                                       public ComboBox::Listener
{
public:
    explicit CompreezorAudioProcessorEditor (CompreezorAudioProcessor&);
    ~CompreezorAudioProcessorEditor() override;

    //==============================================================================
    void paint (Graphics&) override;
    void resized() override;

    // Callbacks for JUCE widgets
    void sliderValueChanged (Slider* sliderThatWasMoved) override;
    void buttonClicked (Button* buttonThatWasClicked) override;
    void comboBoxChanged (ComboBox* comboBoxThatHasChanged) override;

private:
    // Binary resources (unused but retained for backward compatibility)
    static const char* brushedMetalShrunk_jpg;
    static const int   brushedMetalShrunk_jpgSize;

    // Slider controls
    std::unique_ptr<Slider> detGainSlider;
    std::unique_ptr<Slider> thresholdSlider;
    std::unique_ptr<Slider> attackTimeSlider;
    std::unique_ptr<Slider> releaseTimeSlider;
    std::unique_ptr<Slider> ratioSlider;
    std::unique_ptr<Slider> outputGainSlider;
    std::unique_ptr<Slider> kneeWidthSlider;

    // New controls
    std::unique_ptr<ToggleButton> digitalAnalogButton;  // toggles digital/analogue time constants
    std::unique_ptr<ComboBox>     detectModeCombo;     // selects peak/ms/rms detector

    // Labels for the new controls (we use separate Label components to avoid
    // overlapping the bottom row text with other UI elements)
    std::unique_ptr<Label> analogueLabel;              // label for analogue/digital toggle
    std::unique_ptr<Label> detectorLabel;              // label for detector mode selector

    // Action buttons
    std::unique_ptr<TextButton> uploadButton;
    std::unique_ptr<TextButton> downloadButton;

    // File chooser used for asynchronous upload; persists while the chooser is open
    std::unique_ptr<juce::FileChooser> fileChooser;

    // Reference to the processor that created this editor
    CompreezorAudioProcessor& processor;

    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (CompreezorAudioProcessorEditor)
};
